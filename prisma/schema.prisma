generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  role            String           @default("USER")
  monthlySales    Int              @default(0)
  discountPercent Int              @default(0)
  discountValidUntil DateTime?
  totalPoints     Int              @default(0)  // Összes megszerzett jutalékpont
  referrerId      String?
  resetToken      String?          // Token a jelszó visszaállításához
  resetTokenExpiry DateTime?       // Token lejárati ideje
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  accounts        Account[]
  billingAddress  BillingAddress?
  orders          Order[]
  sessions        Session[]
  shippingAddress ShippingAddress?
  referrer        User?            @relation("UserReferrals", fields: [referrerId], references: [id])
  referrals       User[]           @relation("UserReferrals")
  commissions     Commission[]

  @@map("users")
  @@index([referrerId])
  @@index([resetToken])
}

model ShippingAddress {
  id        String   @id @default(cuid())
  userId    String   @unique
  fullName  String
  country   String
  city      String
  address   String
  zipCode   String
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BillingAddress {
  id          String   @id @default(cuid())
  userId      String   @unique
  fullName    String
  country     String
  city        String
  address     String
  zipCode     String
  phone       String?
  companyName String?
  taxNumber   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id                  String        @id @default(cuid())
  name                String
  description         String
  price               Float
  discountedPrice     Float?
  discountLevel1Price Float?       // First level discount price
  discountLevel2Price Float?       // Second level discount price
  images              String[]
  categoryId          String
  stock               Int
  pointValue          Int           @default(0)
  status              ProductStatus @default(ACTIVE)
  sku                 String?       @unique
  metaTitle           String?
  metaDescription     String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  descriptionSections Json?
  orderItems          OrderItem[]
  category            Category      @relation(fields: [categoryId], references: [id])
}

model Category {
  id          String     @id @default(cuid())
  name        String
  description String?
  slug        String     @unique
  parentId    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToCategory")
  products    Product[]
}

model Order {
  id                 String      @id @default(cuid())
  userId             String?
  total              Float
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  paymentMethod      String
  status             OrderStatus @default(PENDING)
  billingAddress     String
  billingCity        String
  billingCompanyName String?
  billingCountry     String
  billingFullName    String
  billingPhone       String?
  billingTaxNumber   String?
  billingZipCode     String
  shippingAddress    String
  shippingCity       String
  shippingCountry    String
  shippingFullName   String
  shippingPhone      String?
  shippingZipCode    String
  shippingEmail      String
  shippingMethod     String
  barionPaymentId    String?
  user               User?       @relation(fields: [userId], references: [id])
  items              OrderItem[]

  @@index([userId])
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model ShippingMethod {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model EmailTemplate {
  id           String      @id @default(cuid())
  name         String
  subject      String
  content      String      @db.Text
  triggerStatus OrderStatus
  isActive     Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Commission {
  id          String   @id @default(cuid())
  amount      Float
  type        String   // 'personal' | 'network'
  description String
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  COMPLETED
  CANCELLED
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DISCONTINUED
}
