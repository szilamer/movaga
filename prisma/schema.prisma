// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  role            String    @default("USER")
  monthlySales    Int       @default(0)
  discountPercent Int       @default(0)
  referrerId      String?
  referrer        User?     @relation("UserReferrals", fields: [referrerId], references: [id])
  referrals       User[]    @relation("UserReferrals")
  accounts        Account[]
  sessions        Session[]
  orders          Order[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id              String        @id @default(cuid())
  name            String
  description     String
  descriptionSections Json?
  price           Float
  discountedPrice Float?
  images          String[]
  categoryId      String
  category        Category      @relation(fields: [categoryId], references: [id])
  stock           Int
  status          ProductStatus @default(ACTIVE)
  sku             String?       @unique
  metaTitle       String?
  metaDescription String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  orderItems      OrderItem[]
}

model Category {
  id          String     @id @default(cuid())
  name        String
  description String?
  slug        String     @unique
  parentId    String?
  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToCategory")
  products    Product[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  COMPLETED
  CANCELLED
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  total         Float
  shippingMethod String
  paymentMethod String
  status        OrderStatus @default(PENDING)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  items         OrderItem[]
  user          User       @relation(fields: [userId], references: [id])

  @@index([userId])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model ShippingMethod {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DISCONTINUED
} 